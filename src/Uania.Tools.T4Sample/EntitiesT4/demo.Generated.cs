//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Uania.Tools.T4Sample.EntitiesT4 {
    using System.Linq;
    using System;
    
    
    public partial class demo : demoBase {
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 5 "EntitiesT4/demo.tt"
            this.Write("using System;\nusing System.Collections.Generic;\n\nnamespace ");
            
            #line default
            #line hidden
            
            #line 8 "EntitiesT4/demo.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( NameSpace ));
            
            #line default
            #line hidden
            
            #line 8 "EntitiesT4/demo.tt"
            this.Write("\n{\n");
            
            #line default
            #line hidden
            
            #line 10 "EntitiesT4/demo.tt"
 if (!string.IsNullOrEmpty(Table.Description)) { 
            
            #line default
            #line hidden
            
            #line 11 "EntitiesT4/demo.tt"
            this.Write("    /// <summery>\n    /// ");
            
            #line default
            #line hidden
            
            #line 12 "EntitiesT4/demo.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Table.Description ));
            
            #line default
            #line hidden
            
            #line 12 "EntitiesT4/demo.tt"
            this.Write("\n    /// </summery>\n");
            
            #line default
            #line hidden
            
            #line 14 "EntitiesT4/demo.tt"
 } 
            
            #line default
            #line hidden
            
            #line 15 "EntitiesT4/demo.tt"
            this.Write("    public class ");
            
            #line default
            #line hidden
            
            #line 15 "EntitiesT4/demo.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Table.Name.ToPascalCase() ));
            
            #line default
            #line hidden
            
            #line 15 "EntitiesT4/demo.tt"
            this.Write("\n    {\n");
            
            #line default
            #line hidden
            
            #line 17 "EntitiesT4/demo.tt"
 foreach (var x in Table.Columns) { 
            
            #line default
            #line hidden
            
            #line 18 "EntitiesT4/demo.tt"
 if (!string.IsNullOrEmpty(x.Description)) { 
            
            #line default
            #line hidden
            
            #line 19 "EntitiesT4/demo.tt"
            this.Write("        /// <summery>\n        /// ");
            
            #line default
            #line hidden
            
            #line 20 "EntitiesT4/demo.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( x.Description ));
            
            #line default
            #line hidden
            
            #line 20 "EntitiesT4/demo.tt"
            this.Write("\n        /// </summery>\n");
            
            #line default
            #line hidden
            
            #line 22 "EntitiesT4/demo.tt"
 } // End if 
            
            #line default
            #line hidden
            
            #line 23 "EntitiesT4/demo.tt"
            this.Write("        public ");
            
            #line default
            #line hidden
            
            #line 23 "EntitiesT4/demo.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( GetColumnType(x) ));
            
            #line default
            #line hidden
            
            #line 23 "EntitiesT4/demo.tt"
            this.Write(" ");
            
            #line default
            #line hidden
            
            #line 23 "EntitiesT4/demo.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( x.Name.ToPascalCase() ));
            
            #line default
            #line hidden
            
            #line 23 "EntitiesT4/demo.tt"
            this.Write(" { get; ");
            
            #line default
            #line hidden
            
            #line 23 "EntitiesT4/demo.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( x.IsPrimary ? "" : "set; " ));
            
            #line default
            #line hidden
            
            #line 23 "EntitiesT4/demo.tt"
            this.Write("}\n\n");
            
            #line default
            #line hidden
            
            #line 25 "EntitiesT4/demo.tt"
 } // End foreach 
            
            #line default
            #line hidden
            
            #line 26 "EntitiesT4/demo.tt"
            this.Write("        public ");
            
            #line default
            #line hidden
            
            #line 26 "EntitiesT4/demo.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Table.Name.ToPascalCase() ));
            
            #line default
            #line hidden
            
            #line 26 "EntitiesT4/demo.tt"
            this.Write("(\n            ");
            
            #line default
            #line hidden
            
            #line 27 "EntitiesT4/demo.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( string.Join(",\n            ", Table.Columns.Where(x => x.IsPrimary).Select(d => $"{GetColumnType(d)} {d.Name.ToCamelCase()}")) ));
            
            #line default
            #line hidden
            
            #line 27 "EntitiesT4/demo.tt"
            this.Write("\n        )\n        {\n");
            
            #line default
            #line hidden
            
            #line 30 "EntitiesT4/demo.tt"
 foreach (var x in Table.Columns.Where(x => x.IsPrimary)) { 
            
            #line default
            #line hidden
            
            #line 31 "EntitiesT4/demo.tt"
            this.Write("            ");
            
            #line default
            #line hidden
            
            #line 31 "EntitiesT4/demo.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( x.Name.ToPascalCase() ));
            
            #line default
            #line hidden
            
            #line 31 "EntitiesT4/demo.tt"
            this.Write(" = ");
            
            #line default
            #line hidden
            
            #line 31 "EntitiesT4/demo.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( x.Name.ToCamelCase() ));
            
            #line default
            #line hidden
            
            #line 31 "EntitiesT4/demo.tt"
            this.Write(";\n");
            
            #line default
            #line hidden
            
            #line 32 "EntitiesT4/demo.tt"
 } 
            
            #line default
            #line hidden
            
            #line 33 "EntitiesT4/demo.tt"
            this.Write("        }\n\n        public ");
            
            #line default
            #line hidden
            
            #line 35 "EntitiesT4/demo.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Table.Name.ToPascalCase() ));
            
            #line default
            #line hidden
            
            #line 35 "EntitiesT4/demo.tt"
            this.Write("(\n            ");
            
            #line default
            #line hidden
            
            #line 36 "EntitiesT4/demo.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( string.Join(",\n            ", Table.Columns.Select(d => $"{GetColumnType(d)} {d.Name.ToCamelCase()}")) ));
            
            #line default
            #line hidden
            
            #line 36 "EntitiesT4/demo.tt"
            this.Write("\n        )\n        {\n");
            
            #line default
            #line hidden
            
            #line 39 "EntitiesT4/demo.tt"
 foreach (var x in Table.Columns) { 
            
            #line default
            #line hidden
            
            #line 40 "EntitiesT4/demo.tt"
            this.Write("            ");
            
            #line default
            #line hidden
            
            #line 40 "EntitiesT4/demo.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( x.Name.ToPascalCase() ));
            
            #line default
            #line hidden
            
            #line 40 "EntitiesT4/demo.tt"
            this.Write(" = ");
            
            #line default
            #line hidden
            
            #line 40 "EntitiesT4/demo.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( x.Name.ToCamelCase() ));
            
            #line default
            #line hidden
            
            #line 40 "EntitiesT4/demo.tt"
            this.Write(";\n");
            
            #line default
            #line hidden
            
            #line 41 "EntitiesT4/demo.tt"
 } 
            
            #line default
            #line hidden
            
            #line 42 "EntitiesT4/demo.tt"
            this.Write("        }\n    }\n}");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class demoBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
