<#@ template language="C#" debug="true" hostspecific="true" #>
<#@ assembly name="$(ProjectDir)/bin/Debug/Npgsql.dll" #>
<#@ assembly name="$(SolutionDir)/packages/NETStandard.Library.2.0.3/build/netstandard2.0/ref/netstandard" #>
<#@ assembly name="$(ProjectDir)/bin/Debug/Uania.Tools.T4.exe" #>
<#@ import namespace="Npgsql" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="Uania.Tools.T4.Common" #>
<#
    string ns = "Uania.Tools.Repository.Entities";
    string baseEntity = "SportsTestingBaseEntity";
    
    var path = Host.ResolveAssemblyReference("$(SolutionDir)");
    var connString = "Server=42.192.81.162;Port=5432;Database=sports_testing;User Id=postgres;Password=123456;Timeout=30;Pooling=true;MaxPoolSize=100;";
    var conn = new NpgsqlConnection(connString);
    var command = new NpgsqlCommand("SELECT table_catalog,table_schema,table_name FROM INFORMATION_SCHEMA.TABLES where table_catalog = 'sports_testing' and table_schema = 'public';", conn);
    var da = new NpgsqlDataAdapter();
    da.SelectCommand = command;
    var ds = new DataSet();
    da.Fill(ds);
    var dt = ds.Tables[0];
    // 获取表信息
    foreach (DataRow dr in dt.Rows)
    {
#>
using System.ComponentModel.DataAnnotations.Schema;

namespace <#= ns #>
{
    [Table("<#= dr[2] #>")]
    public class <#= TurnName(dr[2].ToString()) #>  : SportsTestingBaseEntity
    {
<#
        // 获取列信息
        var querySql = "SELECT c.relname,A.attname,col_description(A.attrelid,A.attnum) AS description, format_type ( A.atttypid, A.atttypmod ) AS atttype, CASE WHEN A.attnotnull='f' THEN '0' ELSE '1' END AS isrequired,  a.attnum  FROM  pg_class AS c,  pg_attribute AS a WHERE A.attrelid = C.oid  AND A.attnum > 0  and c.relname = '"+ dr[2] +"'ORDER BY c.relname,a.attnum;";
        var command1 = new NpgsqlCommand(querySql, conn);
        var da1 = new NpgsqlDataAdapter();
        da1.SelectCommand = command1;
        var ds1 = new DataSet();
        da1.Fill(ds1);
        var dt1 = ds1.Tables[0];
        foreach (DataRow dr1 in dt1.Rows)
        {
            if(dr1["attname"].ToString() != "id")
            {
#>
        /// <summary>
        /// <#= dr1["description"] #>
        /// </summary>
        /// <value></value>
        [Column("<#= dr1["attname"] #>")]
        public <#= TurnDataType(dr1["atttype"].ToString()) #> <#= TurnName(dr1["attname"].ToString()) #> {get; set;}
        
<#           
            }        
        }
#>
    
    }
}      
<#
    string basePath = Host.ResolveAssemblyReference("$(TargetDir)"); 
    // TODO: 解决Ubuntu文件写入权限问题
    SaveOutput("/home/yifan","Automaticlly",TurnName(dr[2].ToString()));
    }
#>

<#+
    public static string TurnName(string oriName)
    {
        string[] strArray = oriName.Split("_".ToCharArray());
        string result = string.Empty;
 
        foreach (string s in strArray)
        {
            result += s.Substring(0, 1).ToUpper() + s.Substring(1);
        }
        return result;
    }
    
    public static string TurnDataType(string sqlDataTypeName)
    {
        switch (sqlDataTypeName.ToLower())
        {
            case "bigint":
                return "Int64";
            case "bytea":
                return "byte[]";
            case "boolean":
                return "bool";
            case "timestamp with time zone":
                return "DateTime";
            case "decimal":
                return "decimal";
            case "integer":
                return "int";
            case "character varying":
                return "string";
            default:
                return "string";
        }
    }
    
    void SaveOutput(string baseFolder,string destinationFolder,string outputFileName)
    {
        var file = new SaveFile();
        file.Save(baseFolder,destinationFolder,outputFileName,this.GenerationEnvironment.ToString());
    }
#>